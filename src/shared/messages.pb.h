// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
class GameJoinMsg;
struct GameJoinMsgDefaultTypeInternal;
extern GameJoinMsgDefaultTypeInternal _GameJoinMsg_default_instance_;
class GameMessage;
struct GameMessageDefaultTypeInternal;
extern GameMessageDefaultTypeInternal _GameMessage_default_instance_;
class GameWaitMsg;
struct GameWaitMsgDefaultTypeInternal;
extern GameWaitMsgDefaultTypeInternal _GameWaitMsg_default_instance_;
class GameWonMsg;
struct GameWonMsgDefaultTypeInternal;
extern GameWonMsgDefaultTypeInternal _GameWonMsg_default_instance_;
class GotHitMsg;
struct GotHitMsgDefaultTypeInternal;
extern GotHitMsgDefaultTypeInternal _GotHitMsg_default_instance_;
class ILeaveMsg;
struct ILeaveMsgDefaultTypeInternal;
extern ILeaveMsgDefaultTypeInternal _ILeaveMsg_default_instance_;
class IMoveMsg;
struct IMoveMsgDefaultTypeInternal;
extern IMoveMsgDefaultTypeInternal _IMoveMsg_default_instance_;
class IPlaceBombMsg;
struct IPlaceBombMsgDefaultTypeInternal;
extern IPlaceBombMsgDefaultTypeInternal _IPlaceBombMsg_default_instance_;
class OtherBombPlaceMsg;
struct OtherBombPlaceMsgDefaultTypeInternal;
extern OtherBombPlaceMsgDefaultTypeInternal _OtherBombPlaceMsg_default_instance_;
class OtherLeaveMsg;
struct OtherLeaveMsgDefaultTypeInternal;
extern OtherLeaveMsgDefaultTypeInternal _OtherLeaveMsg_default_instance_;
class OtherMoveMsg;
struct OtherMoveMsgDefaultTypeInternal;
extern OtherMoveMsgDefaultTypeInternal _OtherMoveMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GameJoinMsg* Arena::CreateMaybeMessage<::GameJoinMsg>(Arena*);
template<> ::GameMessage* Arena::CreateMaybeMessage<::GameMessage>(Arena*);
template<> ::GameWaitMsg* Arena::CreateMaybeMessage<::GameWaitMsg>(Arena*);
template<> ::GameWonMsg* Arena::CreateMaybeMessage<::GameWonMsg>(Arena*);
template<> ::GotHitMsg* Arena::CreateMaybeMessage<::GotHitMsg>(Arena*);
template<> ::ILeaveMsg* Arena::CreateMaybeMessage<::ILeaveMsg>(Arena*);
template<> ::IMoveMsg* Arena::CreateMaybeMessage<::IMoveMsg>(Arena*);
template<> ::IPlaceBombMsg* Arena::CreateMaybeMessage<::IPlaceBombMsg>(Arena*);
template<> ::OtherBombPlaceMsg* Arena::CreateMaybeMessage<::OtherBombPlaceMsg>(Arena*);
template<> ::OtherLeaveMsg* Arena::CreateMaybeMessage<::OtherLeaveMsg>(Arena*);
template<> ::OtherMoveMsg* Arena::CreateMaybeMessage<::OtherMoveMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Color : int {
  RED = 0,
  GREEN = 1,
  BLUE = 2,
  YELLOW = 3,
  Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = RED;
constexpr Color Color_MAX = YELLOW;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
enum MessageType : int {
  I_PLACE_BOMB = 0,
  I_MOVE = 1,
  I_LEAVE = 2,
  GAME_JOIN = 3,
  GAME_WAIT = 4,
  OTHER_BOMB_PLACE = 5,
  GOT_HIT_MESSAGE = 6,
  OTHER_MOVE = 7,
  OTHER_LEAVE = 8,
  GAME_WON = 9,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = I_PLACE_BOMB;
constexpr MessageType MessageType_MAX = GAME_WON;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class IPlaceBombMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IPlaceBombMsg) */ {
 public:
  inline IPlaceBombMsg() : IPlaceBombMsg(nullptr) {}
  ~IPlaceBombMsg() override;
  explicit constexpr IPlaceBombMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPlaceBombMsg(const IPlaceBombMsg& from);
  IPlaceBombMsg(IPlaceBombMsg&& from) noexcept
    : IPlaceBombMsg() {
    *this = ::std::move(from);
  }

  inline IPlaceBombMsg& operator=(const IPlaceBombMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPlaceBombMsg& operator=(IPlaceBombMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IPlaceBombMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPlaceBombMsg* internal_default_instance() {
    return reinterpret_cast<const IPlaceBombMsg*>(
               &_IPlaceBombMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IPlaceBombMsg& a, IPlaceBombMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(IPlaceBombMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPlaceBombMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IPlaceBombMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IPlaceBombMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IPlaceBombMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IPlaceBombMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPlaceBombMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IPlaceBombMsg";
  }
  protected:
  explicit IPlaceBombMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:IPlaceBombMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class IMoveMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IMoveMsg) */ {
 public:
  inline IMoveMsg() : IMoveMsg(nullptr) {}
  ~IMoveMsg() override;
  explicit constexpr IMoveMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMoveMsg(const IMoveMsg& from);
  IMoveMsg(IMoveMsg&& from) noexcept
    : IMoveMsg() {
    *this = ::std::move(from);
  }

  inline IMoveMsg& operator=(const IMoveMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMoveMsg& operator=(IMoveMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMoveMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMoveMsg* internal_default_instance() {
    return reinterpret_cast<const IMoveMsg*>(
               &_IMoveMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMoveMsg& a, IMoveMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(IMoveMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMoveMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMoveMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMoveMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMoveMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMoveMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMoveMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IMoveMsg";
  }
  protected:
  explicit IMoveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:IMoveMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ILeaveMsg final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ILeaveMsg) */ {
 public:
  inline ILeaveMsg() : ILeaveMsg(nullptr) {}
  explicit constexpr ILeaveMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ILeaveMsg(const ILeaveMsg& from);
  ILeaveMsg(ILeaveMsg&& from) noexcept
    : ILeaveMsg() {
    *this = ::std::move(from);
  }

  inline ILeaveMsg& operator=(const ILeaveMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ILeaveMsg& operator=(ILeaveMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ILeaveMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ILeaveMsg* internal_default_instance() {
    return reinterpret_cast<const ILeaveMsg*>(
               &_ILeaveMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ILeaveMsg& a, ILeaveMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ILeaveMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ILeaveMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ILeaveMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ILeaveMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ILeaveMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ILeaveMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ILeaveMsg";
  }
  protected:
  explicit ILeaveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ILeaveMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GameJoinMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameJoinMsg) */ {
 public:
  inline GameJoinMsg() : GameJoinMsg(nullptr) {}
  ~GameJoinMsg() override;
  explicit constexpr GameJoinMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameJoinMsg(const GameJoinMsg& from);
  GameJoinMsg(GameJoinMsg&& from) noexcept
    : GameJoinMsg() {
    *this = ::std::move(from);
  }

  inline GameJoinMsg& operator=(const GameJoinMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameJoinMsg& operator=(GameJoinMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameJoinMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameJoinMsg* internal_default_instance() {
    return reinterpret_cast<const GameJoinMsg*>(
               &_GameJoinMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameJoinMsg& a, GameJoinMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GameJoinMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameJoinMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameJoinMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameJoinMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameJoinMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameJoinMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameJoinMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameJoinMsg";
  }
  protected:
  explicit GameJoinMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kYouFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Color color = 2;
  void clear_color();
  ::Color color() const;
  void set_color(::Color value);
  private:
  ::Color _internal_color() const;
  void _internal_set_color(::Color value);
  public:

  // bool You = 3;
  void clear_you();
  bool you() const;
  void set_you(bool value);
  private:
  bool _internal_you() const;
  void _internal_set_you(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GameJoinMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int color_;
  bool you_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GameWaitMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameWaitMsg) */ {
 public:
  inline GameWaitMsg() : GameWaitMsg(nullptr) {}
  ~GameWaitMsg() override;
  explicit constexpr GameWaitMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameWaitMsg(const GameWaitMsg& from);
  GameWaitMsg(GameWaitMsg&& from) noexcept
    : GameWaitMsg() {
    *this = ::std::move(from);
  }

  inline GameWaitMsg& operator=(const GameWaitMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameWaitMsg& operator=(GameWaitMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameWaitMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameWaitMsg* internal_default_instance() {
    return reinterpret_cast<const GameWaitMsg*>(
               &_GameWaitMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameWaitMsg& a, GameWaitMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GameWaitMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameWaitMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameWaitMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameWaitMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameWaitMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameWaitMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameWaitMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameWaitMsg";
  }
  protected:
  explicit GameWaitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaitingForFieldNumber = 1,
  };
  // int32 waitingFor = 1;
  void clear_waitingfor();
  int32_t waitingfor() const;
  void set_waitingfor(int32_t value);
  private:
  int32_t _internal_waitingfor() const;
  void _internal_set_waitingfor(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GameWaitMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t waitingfor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class OtherBombPlaceMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OtherBombPlaceMsg) */ {
 public:
  inline OtherBombPlaceMsg() : OtherBombPlaceMsg(nullptr) {}
  ~OtherBombPlaceMsg() override;
  explicit constexpr OtherBombPlaceMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtherBombPlaceMsg(const OtherBombPlaceMsg& from);
  OtherBombPlaceMsg(OtherBombPlaceMsg&& from) noexcept
    : OtherBombPlaceMsg() {
    *this = ::std::move(from);
  }

  inline OtherBombPlaceMsg& operator=(const OtherBombPlaceMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherBombPlaceMsg& operator=(OtherBombPlaceMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OtherBombPlaceMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtherBombPlaceMsg* internal_default_instance() {
    return reinterpret_cast<const OtherBombPlaceMsg*>(
               &_OtherBombPlaceMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OtherBombPlaceMsg& a, OtherBombPlaceMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherBombPlaceMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherBombPlaceMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OtherBombPlaceMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OtherBombPlaceMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OtherBombPlaceMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OtherBombPlaceMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherBombPlaceMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OtherBombPlaceMsg";
  }
  protected:
  explicit OtherBombPlaceMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:OtherBombPlaceMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t timestamp_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GotHitMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GotHitMsg) */ {
 public:
  inline GotHitMsg() : GotHitMsg(nullptr) {}
  ~GotHitMsg() override;
  explicit constexpr GotHitMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GotHitMsg(const GotHitMsg& from);
  GotHitMsg(GotHitMsg&& from) noexcept
    : GotHitMsg() {
    *this = ::std::move(from);
  }

  inline GotHitMsg& operator=(const GotHitMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GotHitMsg& operator=(GotHitMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GotHitMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GotHitMsg* internal_default_instance() {
    return reinterpret_cast<const GotHitMsg*>(
               &_GotHitMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GotHitMsg& a, GotHitMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GotHitMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GotHitMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GotHitMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GotHitMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GotHitMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GotHitMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GotHitMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GotHitMsg";
  }
  protected:
  explicit GotHitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLivesRemainingFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 livesRemaining = 2;
  void clear_livesremaining();
  int32_t livesremaining() const;
  void set_livesremaining(int32_t value);
  private:
  int32_t _internal_livesremaining() const;
  void _internal_set_livesremaining(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GotHitMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t livesremaining_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class OtherMoveMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OtherMoveMsg) */ {
 public:
  inline OtherMoveMsg() : OtherMoveMsg(nullptr) {}
  ~OtherMoveMsg() override;
  explicit constexpr OtherMoveMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtherMoveMsg(const OtherMoveMsg& from);
  OtherMoveMsg(OtherMoveMsg&& from) noexcept
    : OtherMoveMsg() {
    *this = ::std::move(from);
  }

  inline OtherMoveMsg& operator=(const OtherMoveMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherMoveMsg& operator=(OtherMoveMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OtherMoveMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtherMoveMsg* internal_default_instance() {
    return reinterpret_cast<const OtherMoveMsg*>(
               &_OtherMoveMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OtherMoveMsg& a, OtherMoveMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherMoveMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherMoveMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OtherMoveMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OtherMoveMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OtherMoveMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OtherMoveMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherMoveMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OtherMoveMsg";
  }
  protected:
  explicit OtherMoveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:OtherMoveMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class OtherLeaveMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OtherLeaveMsg) */ {
 public:
  inline OtherLeaveMsg() : OtherLeaveMsg(nullptr) {}
  ~OtherLeaveMsg() override;
  explicit constexpr OtherLeaveMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtherLeaveMsg(const OtherLeaveMsg& from);
  OtherLeaveMsg(OtherLeaveMsg&& from) noexcept
    : OtherLeaveMsg() {
    *this = ::std::move(from);
  }

  inline OtherLeaveMsg& operator=(const OtherLeaveMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherLeaveMsg& operator=(OtherLeaveMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OtherLeaveMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtherLeaveMsg* internal_default_instance() {
    return reinterpret_cast<const OtherLeaveMsg*>(
               &_OtherLeaveMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OtherLeaveMsg& a, OtherLeaveMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherLeaveMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherLeaveMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OtherLeaveMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OtherLeaveMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OtherLeaveMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OtherLeaveMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherLeaveMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OtherLeaveMsg";
  }
  protected:
  explicit OtherLeaveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:OtherLeaveMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GameWonMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameWonMsg) */ {
 public:
  inline GameWonMsg() : GameWonMsg(nullptr) {}
  ~GameWonMsg() override;
  explicit constexpr GameWonMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameWonMsg(const GameWonMsg& from);
  GameWonMsg(GameWonMsg&& from) noexcept
    : GameWonMsg() {
    *this = ::std::move(from);
  }

  inline GameWonMsg& operator=(const GameWonMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameWonMsg& operator=(GameWonMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameWonMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameWonMsg* internal_default_instance() {
    return reinterpret_cast<const GameWonMsg*>(
               &_GameWonMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GameWonMsg& a, GameWonMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GameWonMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameWonMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameWonMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameWonMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameWonMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameWonMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameWonMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameWonMsg";
  }
  protected:
  explicit GameWonMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinnerFieldNumber = 1,
  };
  // string winner = 1;
  void clear_winner();
  const std::string& winner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_winner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_winner();
  PROTOBUF_NODISCARD std::string* release_winner();
  void set_allocated_winner(std::string* winner);
  private:
  const std::string& _internal_winner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_winner(const std::string& value);
  std::string* _internal_mutable_winner();
  public:

  // @@protoc_insertion_point(class_scope:GameWonMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr winner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GameMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameMessage) */ {
 public:
  inline GameMessage() : GameMessage(nullptr) {}
  ~GameMessage() override;
  explicit constexpr GameMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameMessage(const GameMessage& from);
  GameMessage(GameMessage&& from) noexcept
    : GameMessage() {
    *this = ::std::move(from);
  }

  inline GameMessage& operator=(const GameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameMessage& operator=(GameMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kIPlaceBomb = 2,
    kIMove = 3,
    kILeave = 4,
    kGameJoin = 5,
    kGameWait = 6,
    kOtherBombPlace = 7,
    kGotHitMessage = 8,
    kOtherMove = 9,
    kOtherLeave = 10,
    kGameWon = 11,
    MESSAGE_NOT_SET = 0,
  };

  static inline const GameMessage* internal_default_instance() {
    return reinterpret_cast<const GameMessage*>(
               &_GameMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameMessage& a, GameMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GameMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameMessage";
  }
  protected:
  explicit GameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypeFieldNumber = 1,
    kIPlaceBombFieldNumber = 2,
    kIMoveFieldNumber = 3,
    kILeaveFieldNumber = 4,
    kGameJoinFieldNumber = 5,
    kGameWaitFieldNumber = 6,
    kOtherBombPlaceFieldNumber = 7,
    kGotHitMessageFieldNumber = 8,
    kOtherMoveFieldNumber = 9,
    kOtherLeaveFieldNumber = 10,
    kGameWonFieldNumber = 11,
  };
  // .MessageType message_type = 1;
  void clear_message_type();
  ::MessageType message_type() const;
  void set_message_type(::MessageType value);
  private:
  ::MessageType _internal_message_type() const;
  void _internal_set_message_type(::MessageType value);
  public:

  // .IPlaceBombMsg i_place_bomb = 2;
  bool has_i_place_bomb() const;
  private:
  bool _internal_has_i_place_bomb() const;
  public:
  void clear_i_place_bomb();
  const ::IPlaceBombMsg& i_place_bomb() const;
  PROTOBUF_NODISCARD ::IPlaceBombMsg* release_i_place_bomb();
  ::IPlaceBombMsg* mutable_i_place_bomb();
  void set_allocated_i_place_bomb(::IPlaceBombMsg* i_place_bomb);
  private:
  const ::IPlaceBombMsg& _internal_i_place_bomb() const;
  ::IPlaceBombMsg* _internal_mutable_i_place_bomb();
  public:
  void unsafe_arena_set_allocated_i_place_bomb(
      ::IPlaceBombMsg* i_place_bomb);
  ::IPlaceBombMsg* unsafe_arena_release_i_place_bomb();

  // .IMoveMsg i_move = 3;
  bool has_i_move() const;
  private:
  bool _internal_has_i_move() const;
  public:
  void clear_i_move();
  const ::IMoveMsg& i_move() const;
  PROTOBUF_NODISCARD ::IMoveMsg* release_i_move();
  ::IMoveMsg* mutable_i_move();
  void set_allocated_i_move(::IMoveMsg* i_move);
  private:
  const ::IMoveMsg& _internal_i_move() const;
  ::IMoveMsg* _internal_mutable_i_move();
  public:
  void unsafe_arena_set_allocated_i_move(
      ::IMoveMsg* i_move);
  ::IMoveMsg* unsafe_arena_release_i_move();

  // .ILeaveMsg i_leave = 4;
  bool has_i_leave() const;
  private:
  bool _internal_has_i_leave() const;
  public:
  void clear_i_leave();
  const ::ILeaveMsg& i_leave() const;
  PROTOBUF_NODISCARD ::ILeaveMsg* release_i_leave();
  ::ILeaveMsg* mutable_i_leave();
  void set_allocated_i_leave(::ILeaveMsg* i_leave);
  private:
  const ::ILeaveMsg& _internal_i_leave() const;
  ::ILeaveMsg* _internal_mutable_i_leave();
  public:
  void unsafe_arena_set_allocated_i_leave(
      ::ILeaveMsg* i_leave);
  ::ILeaveMsg* unsafe_arena_release_i_leave();

  // .GameJoinMsg game_join = 5;
  bool has_game_join() const;
  private:
  bool _internal_has_game_join() const;
  public:
  void clear_game_join();
  const ::GameJoinMsg& game_join() const;
  PROTOBUF_NODISCARD ::GameJoinMsg* release_game_join();
  ::GameJoinMsg* mutable_game_join();
  void set_allocated_game_join(::GameJoinMsg* game_join);
  private:
  const ::GameJoinMsg& _internal_game_join() const;
  ::GameJoinMsg* _internal_mutable_game_join();
  public:
  void unsafe_arena_set_allocated_game_join(
      ::GameJoinMsg* game_join);
  ::GameJoinMsg* unsafe_arena_release_game_join();

  // .GameWaitMsg game_wait = 6;
  bool has_game_wait() const;
  private:
  bool _internal_has_game_wait() const;
  public:
  void clear_game_wait();
  const ::GameWaitMsg& game_wait() const;
  PROTOBUF_NODISCARD ::GameWaitMsg* release_game_wait();
  ::GameWaitMsg* mutable_game_wait();
  void set_allocated_game_wait(::GameWaitMsg* game_wait);
  private:
  const ::GameWaitMsg& _internal_game_wait() const;
  ::GameWaitMsg* _internal_mutable_game_wait();
  public:
  void unsafe_arena_set_allocated_game_wait(
      ::GameWaitMsg* game_wait);
  ::GameWaitMsg* unsafe_arena_release_game_wait();

  // .OtherBombPlaceMsg other_bomb_place = 7;
  bool has_other_bomb_place() const;
  private:
  bool _internal_has_other_bomb_place() const;
  public:
  void clear_other_bomb_place();
  const ::OtherBombPlaceMsg& other_bomb_place() const;
  PROTOBUF_NODISCARD ::OtherBombPlaceMsg* release_other_bomb_place();
  ::OtherBombPlaceMsg* mutable_other_bomb_place();
  void set_allocated_other_bomb_place(::OtherBombPlaceMsg* other_bomb_place);
  private:
  const ::OtherBombPlaceMsg& _internal_other_bomb_place() const;
  ::OtherBombPlaceMsg* _internal_mutable_other_bomb_place();
  public:
  void unsafe_arena_set_allocated_other_bomb_place(
      ::OtherBombPlaceMsg* other_bomb_place);
  ::OtherBombPlaceMsg* unsafe_arena_release_other_bomb_place();

  // .GotHitMsg got_hit_message = 8;
  bool has_got_hit_message() const;
  private:
  bool _internal_has_got_hit_message() const;
  public:
  void clear_got_hit_message();
  const ::GotHitMsg& got_hit_message() const;
  PROTOBUF_NODISCARD ::GotHitMsg* release_got_hit_message();
  ::GotHitMsg* mutable_got_hit_message();
  void set_allocated_got_hit_message(::GotHitMsg* got_hit_message);
  private:
  const ::GotHitMsg& _internal_got_hit_message() const;
  ::GotHitMsg* _internal_mutable_got_hit_message();
  public:
  void unsafe_arena_set_allocated_got_hit_message(
      ::GotHitMsg* got_hit_message);
  ::GotHitMsg* unsafe_arena_release_got_hit_message();

  // .OtherMoveMsg other_move = 9;
  bool has_other_move() const;
  private:
  bool _internal_has_other_move() const;
  public:
  void clear_other_move();
  const ::OtherMoveMsg& other_move() const;
  PROTOBUF_NODISCARD ::OtherMoveMsg* release_other_move();
  ::OtherMoveMsg* mutable_other_move();
  void set_allocated_other_move(::OtherMoveMsg* other_move);
  private:
  const ::OtherMoveMsg& _internal_other_move() const;
  ::OtherMoveMsg* _internal_mutable_other_move();
  public:
  void unsafe_arena_set_allocated_other_move(
      ::OtherMoveMsg* other_move);
  ::OtherMoveMsg* unsafe_arena_release_other_move();

  // .OtherLeaveMsg other_leave = 10;
  bool has_other_leave() const;
  private:
  bool _internal_has_other_leave() const;
  public:
  void clear_other_leave();
  const ::OtherLeaveMsg& other_leave() const;
  PROTOBUF_NODISCARD ::OtherLeaveMsg* release_other_leave();
  ::OtherLeaveMsg* mutable_other_leave();
  void set_allocated_other_leave(::OtherLeaveMsg* other_leave);
  private:
  const ::OtherLeaveMsg& _internal_other_leave() const;
  ::OtherLeaveMsg* _internal_mutable_other_leave();
  public:
  void unsafe_arena_set_allocated_other_leave(
      ::OtherLeaveMsg* other_leave);
  ::OtherLeaveMsg* unsafe_arena_release_other_leave();

  // .GameWonMsg game_won = 11;
  bool has_game_won() const;
  private:
  bool _internal_has_game_won() const;
  public:
  void clear_game_won();
  const ::GameWonMsg& game_won() const;
  PROTOBUF_NODISCARD ::GameWonMsg* release_game_won();
  ::GameWonMsg* mutable_game_won();
  void set_allocated_game_won(::GameWonMsg* game_won);
  private:
  const ::GameWonMsg& _internal_game_won() const;
  ::GameWonMsg* _internal_mutable_game_won();
  public:
  void unsafe_arena_set_allocated_game_won(
      ::GameWonMsg* game_won);
  ::GameWonMsg* unsafe_arena_release_game_won();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:GameMessage)
 private:
  class _Internal;
  void set_has_i_place_bomb();
  void set_has_i_move();
  void set_has_i_leave();
  void set_has_game_join();
  void set_has_game_wait();
  void set_has_other_bomb_place();
  void set_has_got_hit_message();
  void set_has_other_move();
  void set_has_other_leave();
  void set_has_game_won();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int message_type_;
  union MessageUnion {
    constexpr MessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::IPlaceBombMsg* i_place_bomb_;
    ::IMoveMsg* i_move_;
    ::ILeaveMsg* i_leave_;
    ::GameJoinMsg* game_join_;
    ::GameWaitMsg* game_wait_;
    ::OtherBombPlaceMsg* other_bomb_place_;
    ::GotHitMsg* got_hit_message_;
    ::OtherMoveMsg* other_move_;
    ::OtherLeaveMsg* other_leave_;
    ::GameWonMsg* game_won_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IPlaceBombMsg

// float x = 1;
inline void IPlaceBombMsg::clear_x() {
  x_ = 0;
}
inline float IPlaceBombMsg::_internal_x() const {
  return x_;
}
inline float IPlaceBombMsg::x() const {
  // @@protoc_insertion_point(field_get:IPlaceBombMsg.x)
  return _internal_x();
}
inline void IPlaceBombMsg::_internal_set_x(float value) {
  
  x_ = value;
}
inline void IPlaceBombMsg::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:IPlaceBombMsg.x)
}

// float y = 2;
inline void IPlaceBombMsg::clear_y() {
  y_ = 0;
}
inline float IPlaceBombMsg::_internal_y() const {
  return y_;
}
inline float IPlaceBombMsg::y() const {
  // @@protoc_insertion_point(field_get:IPlaceBombMsg.y)
  return _internal_y();
}
inline void IPlaceBombMsg::_internal_set_y(float value) {
  
  y_ = value;
}
inline void IPlaceBombMsg::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:IPlaceBombMsg.y)
}

// -------------------------------------------------------------------

// IMoveMsg

// float x = 1;
inline void IMoveMsg::clear_x() {
  x_ = 0;
}
inline float IMoveMsg::_internal_x() const {
  return x_;
}
inline float IMoveMsg::x() const {
  // @@protoc_insertion_point(field_get:IMoveMsg.x)
  return _internal_x();
}
inline void IMoveMsg::_internal_set_x(float value) {
  
  x_ = value;
}
inline void IMoveMsg::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:IMoveMsg.x)
}

// float y = 2;
inline void IMoveMsg::clear_y() {
  y_ = 0;
}
inline float IMoveMsg::_internal_y() const {
  return y_;
}
inline float IMoveMsg::y() const {
  // @@protoc_insertion_point(field_get:IMoveMsg.y)
  return _internal_y();
}
inline void IMoveMsg::_internal_set_y(float value) {
  
  y_ = value;
}
inline void IMoveMsg::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:IMoveMsg.y)
}

// -------------------------------------------------------------------

// ILeaveMsg

// -------------------------------------------------------------------

// GameJoinMsg

// string name = 1;
inline void GameJoinMsg::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GameJoinMsg::name() const {
  // @@protoc_insertion_point(field_get:GameJoinMsg.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameJoinMsg::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GameJoinMsg.name)
}
inline std::string* GameJoinMsg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:GameJoinMsg.name)
  return _s;
}
inline const std::string& GameJoinMsg::_internal_name() const {
  return name_.Get();
}
inline void GameJoinMsg::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameJoinMsg::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameJoinMsg::release_name() {
  // @@protoc_insertion_point(field_release:GameJoinMsg.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameJoinMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameJoinMsg.name)
}

// .Color color = 2;
inline void GameJoinMsg::clear_color() {
  color_ = 0;
}
inline ::Color GameJoinMsg::_internal_color() const {
  return static_cast< ::Color >(color_);
}
inline ::Color GameJoinMsg::color() const {
  // @@protoc_insertion_point(field_get:GameJoinMsg.color)
  return _internal_color();
}
inline void GameJoinMsg::_internal_set_color(::Color value) {
  
  color_ = value;
}
inline void GameJoinMsg::set_color(::Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:GameJoinMsg.color)
}

// bool You = 3;
inline void GameJoinMsg::clear_you() {
  you_ = false;
}
inline bool GameJoinMsg::_internal_you() const {
  return you_;
}
inline bool GameJoinMsg::you() const {
  // @@protoc_insertion_point(field_get:GameJoinMsg.You)
  return _internal_you();
}
inline void GameJoinMsg::_internal_set_you(bool value) {
  
  you_ = value;
}
inline void GameJoinMsg::set_you(bool value) {
  _internal_set_you(value);
  // @@protoc_insertion_point(field_set:GameJoinMsg.You)
}

// -------------------------------------------------------------------

// GameWaitMsg

// int32 waitingFor = 1;
inline void GameWaitMsg::clear_waitingfor() {
  waitingfor_ = 0;
}
inline int32_t GameWaitMsg::_internal_waitingfor() const {
  return waitingfor_;
}
inline int32_t GameWaitMsg::waitingfor() const {
  // @@protoc_insertion_point(field_get:GameWaitMsg.waitingFor)
  return _internal_waitingfor();
}
inline void GameWaitMsg::_internal_set_waitingfor(int32_t value) {
  
  waitingfor_ = value;
}
inline void GameWaitMsg::set_waitingfor(int32_t value) {
  _internal_set_waitingfor(value);
  // @@protoc_insertion_point(field_set:GameWaitMsg.waitingFor)
}

// -------------------------------------------------------------------

// OtherBombPlaceMsg

// int64 timestamp = 1;
inline void OtherBombPlaceMsg::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t OtherBombPlaceMsg::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t OtherBombPlaceMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:OtherBombPlaceMsg.timestamp)
  return _internal_timestamp();
}
inline void OtherBombPlaceMsg::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void OtherBombPlaceMsg::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:OtherBombPlaceMsg.timestamp)
}

// string name = 2;
inline void OtherBombPlaceMsg::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OtherBombPlaceMsg::name() const {
  // @@protoc_insertion_point(field_get:OtherBombPlaceMsg.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OtherBombPlaceMsg::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OtherBombPlaceMsg.name)
}
inline std::string* OtherBombPlaceMsg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:OtherBombPlaceMsg.name)
  return _s;
}
inline const std::string& OtherBombPlaceMsg::_internal_name() const {
  return name_.Get();
}
inline void OtherBombPlaceMsg::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OtherBombPlaceMsg::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OtherBombPlaceMsg::release_name() {
  // @@protoc_insertion_point(field_release:OtherBombPlaceMsg.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OtherBombPlaceMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OtherBombPlaceMsg.name)
}

// float x = 3;
inline void OtherBombPlaceMsg::clear_x() {
  x_ = 0;
}
inline float OtherBombPlaceMsg::_internal_x() const {
  return x_;
}
inline float OtherBombPlaceMsg::x() const {
  // @@protoc_insertion_point(field_get:OtherBombPlaceMsg.x)
  return _internal_x();
}
inline void OtherBombPlaceMsg::_internal_set_x(float value) {
  
  x_ = value;
}
inline void OtherBombPlaceMsg::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:OtherBombPlaceMsg.x)
}

// float y = 4;
inline void OtherBombPlaceMsg::clear_y() {
  y_ = 0;
}
inline float OtherBombPlaceMsg::_internal_y() const {
  return y_;
}
inline float OtherBombPlaceMsg::y() const {
  // @@protoc_insertion_point(field_get:OtherBombPlaceMsg.y)
  return _internal_y();
}
inline void OtherBombPlaceMsg::_internal_set_y(float value) {
  
  y_ = value;
}
inline void OtherBombPlaceMsg::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:OtherBombPlaceMsg.y)
}

// -------------------------------------------------------------------

// GotHitMsg

// string name = 1;
inline void GotHitMsg::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GotHitMsg::name() const {
  // @@protoc_insertion_point(field_get:GotHitMsg.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GotHitMsg::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GotHitMsg.name)
}
inline std::string* GotHitMsg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:GotHitMsg.name)
  return _s;
}
inline const std::string& GotHitMsg::_internal_name() const {
  return name_.Get();
}
inline void GotHitMsg::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GotHitMsg::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GotHitMsg::release_name() {
  // @@protoc_insertion_point(field_release:GotHitMsg.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GotHitMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GotHitMsg.name)
}

// int32 livesRemaining = 2;
inline void GotHitMsg::clear_livesremaining() {
  livesremaining_ = 0;
}
inline int32_t GotHitMsg::_internal_livesremaining() const {
  return livesremaining_;
}
inline int32_t GotHitMsg::livesremaining() const {
  // @@protoc_insertion_point(field_get:GotHitMsg.livesRemaining)
  return _internal_livesremaining();
}
inline void GotHitMsg::_internal_set_livesremaining(int32_t value) {
  
  livesremaining_ = value;
}
inline void GotHitMsg::set_livesremaining(int32_t value) {
  _internal_set_livesremaining(value);
  // @@protoc_insertion_point(field_set:GotHitMsg.livesRemaining)
}

// -------------------------------------------------------------------

// OtherMoveMsg

// string name = 1;
inline void OtherMoveMsg::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OtherMoveMsg::name() const {
  // @@protoc_insertion_point(field_get:OtherMoveMsg.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OtherMoveMsg::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OtherMoveMsg.name)
}
inline std::string* OtherMoveMsg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:OtherMoveMsg.name)
  return _s;
}
inline const std::string& OtherMoveMsg::_internal_name() const {
  return name_.Get();
}
inline void OtherMoveMsg::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OtherMoveMsg::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OtherMoveMsg::release_name() {
  // @@protoc_insertion_point(field_release:OtherMoveMsg.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OtherMoveMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OtherMoveMsg.name)
}

// float x = 2;
inline void OtherMoveMsg::clear_x() {
  x_ = 0;
}
inline float OtherMoveMsg::_internal_x() const {
  return x_;
}
inline float OtherMoveMsg::x() const {
  // @@protoc_insertion_point(field_get:OtherMoveMsg.x)
  return _internal_x();
}
inline void OtherMoveMsg::_internal_set_x(float value) {
  
  x_ = value;
}
inline void OtherMoveMsg::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:OtherMoveMsg.x)
}

// float y = 3;
inline void OtherMoveMsg::clear_y() {
  y_ = 0;
}
inline float OtherMoveMsg::_internal_y() const {
  return y_;
}
inline float OtherMoveMsg::y() const {
  // @@protoc_insertion_point(field_get:OtherMoveMsg.y)
  return _internal_y();
}
inline void OtherMoveMsg::_internal_set_y(float value) {
  
  y_ = value;
}
inline void OtherMoveMsg::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:OtherMoveMsg.y)
}

// -------------------------------------------------------------------

// OtherLeaveMsg

// string name = 1;
inline void OtherLeaveMsg::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OtherLeaveMsg::name() const {
  // @@protoc_insertion_point(field_get:OtherLeaveMsg.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OtherLeaveMsg::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OtherLeaveMsg.name)
}
inline std::string* OtherLeaveMsg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:OtherLeaveMsg.name)
  return _s;
}
inline const std::string& OtherLeaveMsg::_internal_name() const {
  return name_.Get();
}
inline void OtherLeaveMsg::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OtherLeaveMsg::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OtherLeaveMsg::release_name() {
  // @@protoc_insertion_point(field_release:OtherLeaveMsg.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OtherLeaveMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OtherLeaveMsg.name)
}

// -------------------------------------------------------------------

// GameWonMsg

// string winner = 1;
inline void GameWonMsg::clear_winner() {
  winner_.ClearToEmpty();
}
inline const std::string& GameWonMsg::winner() const {
  // @@protoc_insertion_point(field_get:GameWonMsg.winner)
  return _internal_winner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameWonMsg::set_winner(ArgT0&& arg0, ArgT... args) {
 
 winner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GameWonMsg.winner)
}
inline std::string* GameWonMsg::mutable_winner() {
  std::string* _s = _internal_mutable_winner();
  // @@protoc_insertion_point(field_mutable:GameWonMsg.winner)
  return _s;
}
inline const std::string& GameWonMsg::_internal_winner() const {
  return winner_.Get();
}
inline void GameWonMsg::_internal_set_winner(const std::string& value) {
  
  winner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameWonMsg::_internal_mutable_winner() {
  
  return winner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameWonMsg::release_winner() {
  // @@protoc_insertion_point(field_release:GameWonMsg.winner)
  return winner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameWonMsg::set_allocated_winner(std::string* winner) {
  if (winner != nullptr) {
    
  } else {
    
  }
  winner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), winner,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (winner_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    winner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GameWonMsg.winner)
}

// -------------------------------------------------------------------

// GameMessage

// .MessageType message_type = 1;
inline void GameMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::MessageType GameMessage::_internal_message_type() const {
  return static_cast< ::MessageType >(message_type_);
}
inline ::MessageType GameMessage::message_type() const {
  // @@protoc_insertion_point(field_get:GameMessage.message_type)
  return _internal_message_type();
}
inline void GameMessage::_internal_set_message_type(::MessageType value) {
  
  message_type_ = value;
}
inline void GameMessage::set_message_type(::MessageType value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:GameMessage.message_type)
}

// .IPlaceBombMsg i_place_bomb = 2;
inline bool GameMessage::_internal_has_i_place_bomb() const {
  return message_case() == kIPlaceBomb;
}
inline bool GameMessage::has_i_place_bomb() const {
  return _internal_has_i_place_bomb();
}
inline void GameMessage::set_has_i_place_bomb() {
  _oneof_case_[0] = kIPlaceBomb;
}
inline void GameMessage::clear_i_place_bomb() {
  if (_internal_has_i_place_bomb()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.i_place_bomb_;
    }
    clear_has_message();
  }
}
inline ::IPlaceBombMsg* GameMessage::release_i_place_bomb() {
  // @@protoc_insertion_point(field_release:GameMessage.i_place_bomb)
  if (_internal_has_i_place_bomb()) {
    clear_has_message();
      ::IPlaceBombMsg* temp = message_.i_place_bomb_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.i_place_bomb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IPlaceBombMsg& GameMessage::_internal_i_place_bomb() const {
  return _internal_has_i_place_bomb()
      ? *message_.i_place_bomb_
      : reinterpret_cast< ::IPlaceBombMsg&>(::_IPlaceBombMsg_default_instance_);
}
inline const ::IPlaceBombMsg& GameMessage::i_place_bomb() const {
  // @@protoc_insertion_point(field_get:GameMessage.i_place_bomb)
  return _internal_i_place_bomb();
}
inline ::IPlaceBombMsg* GameMessage::unsafe_arena_release_i_place_bomb() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.i_place_bomb)
  if (_internal_has_i_place_bomb()) {
    clear_has_message();
    ::IPlaceBombMsg* temp = message_.i_place_bomb_;
    message_.i_place_bomb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_i_place_bomb(::IPlaceBombMsg* i_place_bomb) {
  clear_message();
  if (i_place_bomb) {
    set_has_i_place_bomb();
    message_.i_place_bomb_ = i_place_bomb;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.i_place_bomb)
}
inline ::IPlaceBombMsg* GameMessage::_internal_mutable_i_place_bomb() {
  if (!_internal_has_i_place_bomb()) {
    clear_message();
    set_has_i_place_bomb();
    message_.i_place_bomb_ = CreateMaybeMessage< ::IPlaceBombMsg >(GetArenaForAllocation());
  }
  return message_.i_place_bomb_;
}
inline ::IPlaceBombMsg* GameMessage::mutable_i_place_bomb() {
  ::IPlaceBombMsg* _msg = _internal_mutable_i_place_bomb();
  // @@protoc_insertion_point(field_mutable:GameMessage.i_place_bomb)
  return _msg;
}

// .IMoveMsg i_move = 3;
inline bool GameMessage::_internal_has_i_move() const {
  return message_case() == kIMove;
}
inline bool GameMessage::has_i_move() const {
  return _internal_has_i_move();
}
inline void GameMessage::set_has_i_move() {
  _oneof_case_[0] = kIMove;
}
inline void GameMessage::clear_i_move() {
  if (_internal_has_i_move()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.i_move_;
    }
    clear_has_message();
  }
}
inline ::IMoveMsg* GameMessage::release_i_move() {
  // @@protoc_insertion_point(field_release:GameMessage.i_move)
  if (_internal_has_i_move()) {
    clear_has_message();
      ::IMoveMsg* temp = message_.i_move_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.i_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IMoveMsg& GameMessage::_internal_i_move() const {
  return _internal_has_i_move()
      ? *message_.i_move_
      : reinterpret_cast< ::IMoveMsg&>(::_IMoveMsg_default_instance_);
}
inline const ::IMoveMsg& GameMessage::i_move() const {
  // @@protoc_insertion_point(field_get:GameMessage.i_move)
  return _internal_i_move();
}
inline ::IMoveMsg* GameMessage::unsafe_arena_release_i_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.i_move)
  if (_internal_has_i_move()) {
    clear_has_message();
    ::IMoveMsg* temp = message_.i_move_;
    message_.i_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_i_move(::IMoveMsg* i_move) {
  clear_message();
  if (i_move) {
    set_has_i_move();
    message_.i_move_ = i_move;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.i_move)
}
inline ::IMoveMsg* GameMessage::_internal_mutable_i_move() {
  if (!_internal_has_i_move()) {
    clear_message();
    set_has_i_move();
    message_.i_move_ = CreateMaybeMessage< ::IMoveMsg >(GetArenaForAllocation());
  }
  return message_.i_move_;
}
inline ::IMoveMsg* GameMessage::mutable_i_move() {
  ::IMoveMsg* _msg = _internal_mutable_i_move();
  // @@protoc_insertion_point(field_mutable:GameMessage.i_move)
  return _msg;
}

// .ILeaveMsg i_leave = 4;
inline bool GameMessage::_internal_has_i_leave() const {
  return message_case() == kILeave;
}
inline bool GameMessage::has_i_leave() const {
  return _internal_has_i_leave();
}
inline void GameMessage::set_has_i_leave() {
  _oneof_case_[0] = kILeave;
}
inline void GameMessage::clear_i_leave() {
  if (_internal_has_i_leave()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.i_leave_;
    }
    clear_has_message();
  }
}
inline ::ILeaveMsg* GameMessage::release_i_leave() {
  // @@protoc_insertion_point(field_release:GameMessage.i_leave)
  if (_internal_has_i_leave()) {
    clear_has_message();
      ::ILeaveMsg* temp = message_.i_leave_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.i_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ILeaveMsg& GameMessage::_internal_i_leave() const {
  return _internal_has_i_leave()
      ? *message_.i_leave_
      : reinterpret_cast< ::ILeaveMsg&>(::_ILeaveMsg_default_instance_);
}
inline const ::ILeaveMsg& GameMessage::i_leave() const {
  // @@protoc_insertion_point(field_get:GameMessage.i_leave)
  return _internal_i_leave();
}
inline ::ILeaveMsg* GameMessage::unsafe_arena_release_i_leave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.i_leave)
  if (_internal_has_i_leave()) {
    clear_has_message();
    ::ILeaveMsg* temp = message_.i_leave_;
    message_.i_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_i_leave(::ILeaveMsg* i_leave) {
  clear_message();
  if (i_leave) {
    set_has_i_leave();
    message_.i_leave_ = i_leave;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.i_leave)
}
inline ::ILeaveMsg* GameMessage::_internal_mutable_i_leave() {
  if (!_internal_has_i_leave()) {
    clear_message();
    set_has_i_leave();
    message_.i_leave_ = CreateMaybeMessage< ::ILeaveMsg >(GetArenaForAllocation());
  }
  return message_.i_leave_;
}
inline ::ILeaveMsg* GameMessage::mutable_i_leave() {
  ::ILeaveMsg* _msg = _internal_mutable_i_leave();
  // @@protoc_insertion_point(field_mutable:GameMessage.i_leave)
  return _msg;
}

// .GameJoinMsg game_join = 5;
inline bool GameMessage::_internal_has_game_join() const {
  return message_case() == kGameJoin;
}
inline bool GameMessage::has_game_join() const {
  return _internal_has_game_join();
}
inline void GameMessage::set_has_game_join() {
  _oneof_case_[0] = kGameJoin;
}
inline void GameMessage::clear_game_join() {
  if (_internal_has_game_join()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.game_join_;
    }
    clear_has_message();
  }
}
inline ::GameJoinMsg* GameMessage::release_game_join() {
  // @@protoc_insertion_point(field_release:GameMessage.game_join)
  if (_internal_has_game_join()) {
    clear_has_message();
      ::GameJoinMsg* temp = message_.game_join_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.game_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameJoinMsg& GameMessage::_internal_game_join() const {
  return _internal_has_game_join()
      ? *message_.game_join_
      : reinterpret_cast< ::GameJoinMsg&>(::_GameJoinMsg_default_instance_);
}
inline const ::GameJoinMsg& GameMessage::game_join() const {
  // @@protoc_insertion_point(field_get:GameMessage.game_join)
  return _internal_game_join();
}
inline ::GameJoinMsg* GameMessage::unsafe_arena_release_game_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.game_join)
  if (_internal_has_game_join()) {
    clear_has_message();
    ::GameJoinMsg* temp = message_.game_join_;
    message_.game_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_game_join(::GameJoinMsg* game_join) {
  clear_message();
  if (game_join) {
    set_has_game_join();
    message_.game_join_ = game_join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.game_join)
}
inline ::GameJoinMsg* GameMessage::_internal_mutable_game_join() {
  if (!_internal_has_game_join()) {
    clear_message();
    set_has_game_join();
    message_.game_join_ = CreateMaybeMessage< ::GameJoinMsg >(GetArenaForAllocation());
  }
  return message_.game_join_;
}
inline ::GameJoinMsg* GameMessage::mutable_game_join() {
  ::GameJoinMsg* _msg = _internal_mutable_game_join();
  // @@protoc_insertion_point(field_mutable:GameMessage.game_join)
  return _msg;
}

// .GameWaitMsg game_wait = 6;
inline bool GameMessage::_internal_has_game_wait() const {
  return message_case() == kGameWait;
}
inline bool GameMessage::has_game_wait() const {
  return _internal_has_game_wait();
}
inline void GameMessage::set_has_game_wait() {
  _oneof_case_[0] = kGameWait;
}
inline void GameMessage::clear_game_wait() {
  if (_internal_has_game_wait()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.game_wait_;
    }
    clear_has_message();
  }
}
inline ::GameWaitMsg* GameMessage::release_game_wait() {
  // @@protoc_insertion_point(field_release:GameMessage.game_wait)
  if (_internal_has_game_wait()) {
    clear_has_message();
      ::GameWaitMsg* temp = message_.game_wait_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.game_wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameWaitMsg& GameMessage::_internal_game_wait() const {
  return _internal_has_game_wait()
      ? *message_.game_wait_
      : reinterpret_cast< ::GameWaitMsg&>(::_GameWaitMsg_default_instance_);
}
inline const ::GameWaitMsg& GameMessage::game_wait() const {
  // @@protoc_insertion_point(field_get:GameMessage.game_wait)
  return _internal_game_wait();
}
inline ::GameWaitMsg* GameMessage::unsafe_arena_release_game_wait() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.game_wait)
  if (_internal_has_game_wait()) {
    clear_has_message();
    ::GameWaitMsg* temp = message_.game_wait_;
    message_.game_wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_game_wait(::GameWaitMsg* game_wait) {
  clear_message();
  if (game_wait) {
    set_has_game_wait();
    message_.game_wait_ = game_wait;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.game_wait)
}
inline ::GameWaitMsg* GameMessage::_internal_mutable_game_wait() {
  if (!_internal_has_game_wait()) {
    clear_message();
    set_has_game_wait();
    message_.game_wait_ = CreateMaybeMessage< ::GameWaitMsg >(GetArenaForAllocation());
  }
  return message_.game_wait_;
}
inline ::GameWaitMsg* GameMessage::mutable_game_wait() {
  ::GameWaitMsg* _msg = _internal_mutable_game_wait();
  // @@protoc_insertion_point(field_mutable:GameMessage.game_wait)
  return _msg;
}

// .OtherBombPlaceMsg other_bomb_place = 7;
inline bool GameMessage::_internal_has_other_bomb_place() const {
  return message_case() == kOtherBombPlace;
}
inline bool GameMessage::has_other_bomb_place() const {
  return _internal_has_other_bomb_place();
}
inline void GameMessage::set_has_other_bomb_place() {
  _oneof_case_[0] = kOtherBombPlace;
}
inline void GameMessage::clear_other_bomb_place() {
  if (_internal_has_other_bomb_place()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.other_bomb_place_;
    }
    clear_has_message();
  }
}
inline ::OtherBombPlaceMsg* GameMessage::release_other_bomb_place() {
  // @@protoc_insertion_point(field_release:GameMessage.other_bomb_place)
  if (_internal_has_other_bomb_place()) {
    clear_has_message();
      ::OtherBombPlaceMsg* temp = message_.other_bomb_place_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.other_bomb_place_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OtherBombPlaceMsg& GameMessage::_internal_other_bomb_place() const {
  return _internal_has_other_bomb_place()
      ? *message_.other_bomb_place_
      : reinterpret_cast< ::OtherBombPlaceMsg&>(::_OtherBombPlaceMsg_default_instance_);
}
inline const ::OtherBombPlaceMsg& GameMessage::other_bomb_place() const {
  // @@protoc_insertion_point(field_get:GameMessage.other_bomb_place)
  return _internal_other_bomb_place();
}
inline ::OtherBombPlaceMsg* GameMessage::unsafe_arena_release_other_bomb_place() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.other_bomb_place)
  if (_internal_has_other_bomb_place()) {
    clear_has_message();
    ::OtherBombPlaceMsg* temp = message_.other_bomb_place_;
    message_.other_bomb_place_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_other_bomb_place(::OtherBombPlaceMsg* other_bomb_place) {
  clear_message();
  if (other_bomb_place) {
    set_has_other_bomb_place();
    message_.other_bomb_place_ = other_bomb_place;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.other_bomb_place)
}
inline ::OtherBombPlaceMsg* GameMessage::_internal_mutable_other_bomb_place() {
  if (!_internal_has_other_bomb_place()) {
    clear_message();
    set_has_other_bomb_place();
    message_.other_bomb_place_ = CreateMaybeMessage< ::OtherBombPlaceMsg >(GetArenaForAllocation());
  }
  return message_.other_bomb_place_;
}
inline ::OtherBombPlaceMsg* GameMessage::mutable_other_bomb_place() {
  ::OtherBombPlaceMsg* _msg = _internal_mutable_other_bomb_place();
  // @@protoc_insertion_point(field_mutable:GameMessage.other_bomb_place)
  return _msg;
}

// .GotHitMsg got_hit_message = 8;
inline bool GameMessage::_internal_has_got_hit_message() const {
  return message_case() == kGotHitMessage;
}
inline bool GameMessage::has_got_hit_message() const {
  return _internal_has_got_hit_message();
}
inline void GameMessage::set_has_got_hit_message() {
  _oneof_case_[0] = kGotHitMessage;
}
inline void GameMessage::clear_got_hit_message() {
  if (_internal_has_got_hit_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.got_hit_message_;
    }
    clear_has_message();
  }
}
inline ::GotHitMsg* GameMessage::release_got_hit_message() {
  // @@protoc_insertion_point(field_release:GameMessage.got_hit_message)
  if (_internal_has_got_hit_message()) {
    clear_has_message();
      ::GotHitMsg* temp = message_.got_hit_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.got_hit_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GotHitMsg& GameMessage::_internal_got_hit_message() const {
  return _internal_has_got_hit_message()
      ? *message_.got_hit_message_
      : reinterpret_cast< ::GotHitMsg&>(::_GotHitMsg_default_instance_);
}
inline const ::GotHitMsg& GameMessage::got_hit_message() const {
  // @@protoc_insertion_point(field_get:GameMessage.got_hit_message)
  return _internal_got_hit_message();
}
inline ::GotHitMsg* GameMessage::unsafe_arena_release_got_hit_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.got_hit_message)
  if (_internal_has_got_hit_message()) {
    clear_has_message();
    ::GotHitMsg* temp = message_.got_hit_message_;
    message_.got_hit_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_got_hit_message(::GotHitMsg* got_hit_message) {
  clear_message();
  if (got_hit_message) {
    set_has_got_hit_message();
    message_.got_hit_message_ = got_hit_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.got_hit_message)
}
inline ::GotHitMsg* GameMessage::_internal_mutable_got_hit_message() {
  if (!_internal_has_got_hit_message()) {
    clear_message();
    set_has_got_hit_message();
    message_.got_hit_message_ = CreateMaybeMessage< ::GotHitMsg >(GetArenaForAllocation());
  }
  return message_.got_hit_message_;
}
inline ::GotHitMsg* GameMessage::mutable_got_hit_message() {
  ::GotHitMsg* _msg = _internal_mutable_got_hit_message();
  // @@protoc_insertion_point(field_mutable:GameMessage.got_hit_message)
  return _msg;
}

// .OtherMoveMsg other_move = 9;
inline bool GameMessage::_internal_has_other_move() const {
  return message_case() == kOtherMove;
}
inline bool GameMessage::has_other_move() const {
  return _internal_has_other_move();
}
inline void GameMessage::set_has_other_move() {
  _oneof_case_[0] = kOtherMove;
}
inline void GameMessage::clear_other_move() {
  if (_internal_has_other_move()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.other_move_;
    }
    clear_has_message();
  }
}
inline ::OtherMoveMsg* GameMessage::release_other_move() {
  // @@protoc_insertion_point(field_release:GameMessage.other_move)
  if (_internal_has_other_move()) {
    clear_has_message();
      ::OtherMoveMsg* temp = message_.other_move_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.other_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OtherMoveMsg& GameMessage::_internal_other_move() const {
  return _internal_has_other_move()
      ? *message_.other_move_
      : reinterpret_cast< ::OtherMoveMsg&>(::_OtherMoveMsg_default_instance_);
}
inline const ::OtherMoveMsg& GameMessage::other_move() const {
  // @@protoc_insertion_point(field_get:GameMessage.other_move)
  return _internal_other_move();
}
inline ::OtherMoveMsg* GameMessage::unsafe_arena_release_other_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.other_move)
  if (_internal_has_other_move()) {
    clear_has_message();
    ::OtherMoveMsg* temp = message_.other_move_;
    message_.other_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_other_move(::OtherMoveMsg* other_move) {
  clear_message();
  if (other_move) {
    set_has_other_move();
    message_.other_move_ = other_move;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.other_move)
}
inline ::OtherMoveMsg* GameMessage::_internal_mutable_other_move() {
  if (!_internal_has_other_move()) {
    clear_message();
    set_has_other_move();
    message_.other_move_ = CreateMaybeMessage< ::OtherMoveMsg >(GetArenaForAllocation());
  }
  return message_.other_move_;
}
inline ::OtherMoveMsg* GameMessage::mutable_other_move() {
  ::OtherMoveMsg* _msg = _internal_mutable_other_move();
  // @@protoc_insertion_point(field_mutable:GameMessage.other_move)
  return _msg;
}

// .OtherLeaveMsg other_leave = 10;
inline bool GameMessage::_internal_has_other_leave() const {
  return message_case() == kOtherLeave;
}
inline bool GameMessage::has_other_leave() const {
  return _internal_has_other_leave();
}
inline void GameMessage::set_has_other_leave() {
  _oneof_case_[0] = kOtherLeave;
}
inline void GameMessage::clear_other_leave() {
  if (_internal_has_other_leave()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.other_leave_;
    }
    clear_has_message();
  }
}
inline ::OtherLeaveMsg* GameMessage::release_other_leave() {
  // @@protoc_insertion_point(field_release:GameMessage.other_leave)
  if (_internal_has_other_leave()) {
    clear_has_message();
      ::OtherLeaveMsg* temp = message_.other_leave_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.other_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::OtherLeaveMsg& GameMessage::_internal_other_leave() const {
  return _internal_has_other_leave()
      ? *message_.other_leave_
      : reinterpret_cast< ::OtherLeaveMsg&>(::_OtherLeaveMsg_default_instance_);
}
inline const ::OtherLeaveMsg& GameMessage::other_leave() const {
  // @@protoc_insertion_point(field_get:GameMessage.other_leave)
  return _internal_other_leave();
}
inline ::OtherLeaveMsg* GameMessage::unsafe_arena_release_other_leave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.other_leave)
  if (_internal_has_other_leave()) {
    clear_has_message();
    ::OtherLeaveMsg* temp = message_.other_leave_;
    message_.other_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_other_leave(::OtherLeaveMsg* other_leave) {
  clear_message();
  if (other_leave) {
    set_has_other_leave();
    message_.other_leave_ = other_leave;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.other_leave)
}
inline ::OtherLeaveMsg* GameMessage::_internal_mutable_other_leave() {
  if (!_internal_has_other_leave()) {
    clear_message();
    set_has_other_leave();
    message_.other_leave_ = CreateMaybeMessage< ::OtherLeaveMsg >(GetArenaForAllocation());
  }
  return message_.other_leave_;
}
inline ::OtherLeaveMsg* GameMessage::mutable_other_leave() {
  ::OtherLeaveMsg* _msg = _internal_mutable_other_leave();
  // @@protoc_insertion_point(field_mutable:GameMessage.other_leave)
  return _msg;
}

// .GameWonMsg game_won = 11;
inline bool GameMessage::_internal_has_game_won() const {
  return message_case() == kGameWon;
}
inline bool GameMessage::has_game_won() const {
  return _internal_has_game_won();
}
inline void GameMessage::set_has_game_won() {
  _oneof_case_[0] = kGameWon;
}
inline void GameMessage::clear_game_won() {
  if (_internal_has_game_won()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_.game_won_;
    }
    clear_has_message();
  }
}
inline ::GameWonMsg* GameMessage::release_game_won() {
  // @@protoc_insertion_point(field_release:GameMessage.game_won)
  if (_internal_has_game_won()) {
    clear_has_message();
      ::GameWonMsg* temp = message_.game_won_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.game_won_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GameWonMsg& GameMessage::_internal_game_won() const {
  return _internal_has_game_won()
      ? *message_.game_won_
      : reinterpret_cast< ::GameWonMsg&>(::_GameWonMsg_default_instance_);
}
inline const ::GameWonMsg& GameMessage::game_won() const {
  // @@protoc_insertion_point(field_get:GameMessage.game_won)
  return _internal_game_won();
}
inline ::GameWonMsg* GameMessage::unsafe_arena_release_game_won() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameMessage.game_won)
  if (_internal_has_game_won()) {
    clear_has_message();
    ::GameWonMsg* temp = message_.game_won_;
    message_.game_won_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GameMessage::unsafe_arena_set_allocated_game_won(::GameWonMsg* game_won) {
  clear_message();
  if (game_won) {
    set_has_game_won();
    message_.game_won_ = game_won;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameMessage.game_won)
}
inline ::GameWonMsg* GameMessage::_internal_mutable_game_won() {
  if (!_internal_has_game_won()) {
    clear_message();
    set_has_game_won();
    message_.game_won_ = CreateMaybeMessage< ::GameWonMsg >(GetArenaForAllocation());
  }
  return message_.game_won_;
}
inline ::GameWonMsg* GameMessage::mutable_game_won() {
  ::GameWonMsg* _msg = _internal_mutable_game_won();
  // @@protoc_insertion_point(field_mutable:GameMessage.game_won)
  return _msg;
}

inline bool GameMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void GameMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline GameMessage::MessageCase GameMessage::message_case() const {
  return GameMessage::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Color>() {
  return ::Color_descriptor();
}
template <> struct is_proto_enum< ::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageType>() {
  return ::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
