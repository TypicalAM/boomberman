// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr IPlaceBombMsg::IPlaceBombMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct IPlaceBombMsgDefaultTypeInternal {
  constexpr IPlaceBombMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPlaceBombMsgDefaultTypeInternal() {}
  union {
    IPlaceBombMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPlaceBombMsgDefaultTypeInternal _IPlaceBombMsg_default_instance_;
constexpr IMoveMsg::IMoveMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct IMoveMsgDefaultTypeInternal {
  constexpr IMoveMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMoveMsgDefaultTypeInternal() {}
  union {
    IMoveMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMoveMsgDefaultTypeInternal _IMoveMsg_default_instance_;
constexpr ILeaveMsg::ILeaveMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ILeaveMsgDefaultTypeInternal {
  constexpr ILeaveMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ILeaveMsgDefaultTypeInternal() {}
  union {
    ILeaveMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ILeaveMsgDefaultTypeInternal _ILeaveMsg_default_instance_;
constexpr GameJoinMsg::GameJoinMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(0)

  , you_(false){}
struct GameJoinMsgDefaultTypeInternal {
  constexpr GameJoinMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameJoinMsgDefaultTypeInternal() {}
  union {
    GameJoinMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameJoinMsgDefaultTypeInternal _GameJoinMsg_default_instance_;
constexpr GameWaitMsg::GameWaitMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : waitingfor_(0){}
struct GameWaitMsgDefaultTypeInternal {
  constexpr GameWaitMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameWaitMsgDefaultTypeInternal() {}
  union {
    GameWaitMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameWaitMsgDefaultTypeInternal _GameWaitMsg_default_instance_;
constexpr OtherBombPlaceMsg::OtherBombPlaceMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(int64_t{0})
  , x_(0)
  , y_(0){}
struct OtherBombPlaceMsgDefaultTypeInternal {
  constexpr OtherBombPlaceMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OtherBombPlaceMsgDefaultTypeInternal() {}
  union {
    OtherBombPlaceMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OtherBombPlaceMsgDefaultTypeInternal _OtherBombPlaceMsg_default_instance_;
constexpr GotHitMsg::GotHitMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , livesremaining_(0){}
struct GotHitMsgDefaultTypeInternal {
  constexpr GotHitMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GotHitMsgDefaultTypeInternal() {}
  union {
    GotHitMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GotHitMsgDefaultTypeInternal _GotHitMsg_default_instance_;
constexpr OtherMoveMsg::OtherMoveMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0){}
struct OtherMoveMsgDefaultTypeInternal {
  constexpr OtherMoveMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OtherMoveMsgDefaultTypeInternal() {}
  union {
    OtherMoveMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OtherMoveMsgDefaultTypeInternal _OtherMoveMsg_default_instance_;
constexpr OtherLeaveMsg::OtherLeaveMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OtherLeaveMsgDefaultTypeInternal {
  constexpr OtherLeaveMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OtherLeaveMsgDefaultTypeInternal() {}
  union {
    OtherLeaveMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OtherLeaveMsgDefaultTypeInternal _OtherLeaveMsg_default_instance_;
constexpr GameWonMsg::GameWonMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : winner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameWonMsgDefaultTypeInternal {
  constexpr GameWonMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameWonMsgDefaultTypeInternal() {}
  union {
    GameWonMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameWonMsgDefaultTypeInternal _GameWonMsg_default_instance_;
constexpr GameMessage::GameMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_type_(0)

  , _oneof_case_{}{}
struct GameMessageDefaultTypeInternal {
  constexpr GameMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameMessageDefaultTypeInternal() {}
  union {
    GameMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameMessageDefaultTypeInternal _GameMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IPlaceBombMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IPlaceBombMsg, x_),
  PROTOBUF_FIELD_OFFSET(::IPlaceBombMsg, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IMoveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IMoveMsg, x_),
  PROTOBUF_FIELD_OFFSET(::IMoveMsg, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ILeaveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameJoinMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameJoinMsg, name_),
  PROTOBUF_FIELD_OFFSET(::GameJoinMsg, color_),
  PROTOBUF_FIELD_OFFSET(::GameJoinMsg, you_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameWaitMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameWaitMsg, waitingfor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OtherBombPlaceMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OtherBombPlaceMsg, timestamp_),
  PROTOBUF_FIELD_OFFSET(::OtherBombPlaceMsg, name_),
  PROTOBUF_FIELD_OFFSET(::OtherBombPlaceMsg, x_),
  PROTOBUF_FIELD_OFFSET(::OtherBombPlaceMsg, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GotHitMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GotHitMsg, name_),
  PROTOBUF_FIELD_OFFSET(::GotHitMsg, livesremaining_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OtherMoveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OtherMoveMsg, name_),
  PROTOBUF_FIELD_OFFSET(::OtherMoveMsg, x_),
  PROTOBUF_FIELD_OFFSET(::OtherMoveMsg, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OtherLeaveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OtherLeaveMsg, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameWonMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameWonMsg, winner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GameMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameMessage, message_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GameMessage, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::IPlaceBombMsg)},
  { 8, -1, -1, sizeof(::IMoveMsg)},
  { 16, -1, -1, sizeof(::ILeaveMsg)},
  { 22, -1, -1, sizeof(::GameJoinMsg)},
  { 31, -1, -1, sizeof(::GameWaitMsg)},
  { 38, -1, -1, sizeof(::OtherBombPlaceMsg)},
  { 48, -1, -1, sizeof(::GotHitMsg)},
  { 56, -1, -1, sizeof(::OtherMoveMsg)},
  { 65, -1, -1, sizeof(::OtherLeaveMsg)},
  { 72, -1, -1, sizeof(::GameWonMsg)},
  { 79, -1, -1, sizeof(::GameMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IPlaceBombMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IMoveMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ILeaveMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameJoinMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameWaitMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OtherBombPlaceMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GotHitMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OtherMoveMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OtherLeaveMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameWonMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameMessage_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\"%\n\rIPlaceBombMsg\022\t\n\001x\030\001"
  " \001(\002\022\t\n\001y\030\002 \001(\002\" \n\010IMoveMsg\022\t\n\001x\030\001 \001(\002\022\t"
  "\n\001y\030\002 \001(\002\"\013\n\tILeaveMsg\"\?\n\013GameJoinMsg\022\014\n"
  "\004name\030\001 \001(\t\022\025\n\005color\030\002 \001(\0162\006.Color\022\013\n\003Yo"
  "u\030\003 \001(\010\"!\n\013GameWaitMsg\022\022\n\nwaitingFor\030\001 \001"
  "(\005\"J\n\021OtherBombPlaceMsg\022\021\n\ttimestamp\030\001 \001"
  "(\003\022\014\n\004name\030\002 \001(\t\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\"1"
  "\n\tGotHitMsg\022\014\n\004name\030\001 \001(\t\022\026\n\016livesRemain"
  "ing\030\002 \001(\005\"2\n\014OtherMoveMsg\022\014\n\004name\030\001 \001(\t\022"
  "\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\"\035\n\rOtherLeaveMsg\022\014"
  "\n\004name\030\001 \001(\t\"\034\n\nGameWonMsg\022\016\n\006winner\030\001 \001"
  "(\t\"\252\003\n\013GameMessage\022\"\n\014message_type\030\001 \001(\016"
  "2\014.MessageType\022&\n\014i_place_bomb\030\002 \001(\0132\016.I"
  "PlaceBombMsgH\000\022\033\n\006i_move\030\003 \001(\0132\t.IMoveMs"
  "gH\000\022\035\n\007i_leave\030\004 \001(\0132\n.ILeaveMsgH\000\022!\n\tga"
  "me_join\030\005 \001(\0132\014.GameJoinMsgH\000\022!\n\tgame_wa"
  "it\030\006 \001(\0132\014.GameWaitMsgH\000\022.\n\020other_bomb_p"
  "lace\030\007 \001(\0132\022.OtherBombPlaceMsgH\000\022%\n\017got_"
  "hit_message\030\010 \001(\0132\n.GotHitMsgH\000\022#\n\nother"
  "_move\030\t \001(\0132\r.OtherMoveMsgH\000\022%\n\013other_le"
  "ave\030\n \001(\0132\016.OtherLeaveMsgH\000\022\037\n\010game_won\030"
  "\013 \001(\0132\013.GameWonMsgH\000B\t\n\007message*1\n\005Color"
  "\022\007\n\003RED\020\000\022\t\n\005GREEN\020\001\022\010\n\004BLUE\020\002\022\n\n\006YELLOW"
  "\020\003*\260\001\n\013MessageType\022\020\n\014I_PLACE_BOMB\020\000\022\n\n\006"
  "I_MOVE\020\001\022\013\n\007I_LEAVE\020\002\022\r\n\tGAME_JOIN\020\003\022\r\n\t"
  "GAME_WAIT\020\004\022\024\n\020OTHER_BOMB_PLACE\020\005\022\023\n\017GOT"
  "_HIT_MESSAGE\020\006\022\016\n\nOTHER_MOVE\020\007\022\017\n\013OTHER_"
  "LEAVE\020\010\022\014\n\010GAME_WON\020\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, false, 1109, descriptor_table_protodef_messages_2eproto, "messages.proto", 
  &descriptor_table_messages_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class IPlaceBombMsg::_Internal {
 public:
};

IPlaceBombMsg::IPlaceBombMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IPlaceBombMsg)
}
IPlaceBombMsg::IPlaceBombMsg(const IPlaceBombMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:IPlaceBombMsg)
}

inline void IPlaceBombMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

IPlaceBombMsg::~IPlaceBombMsg() {
  // @@protoc_insertion_point(destructor:IPlaceBombMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IPlaceBombMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IPlaceBombMsg::ArenaDtor(void* object) {
  IPlaceBombMsg* _this = reinterpret_cast< IPlaceBombMsg* >(object);
  (void)_this;
}
void IPlaceBombMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPlaceBombMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPlaceBombMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IPlaceBombMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPlaceBombMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IPlaceBombMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IPlaceBombMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IPlaceBombMsg)
  return target;
}

size_t IPlaceBombMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IPlaceBombMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IPlaceBombMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IPlaceBombMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IPlaceBombMsg::GetClassData() const { return &_class_data_; }

void IPlaceBombMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IPlaceBombMsg *>(to)->MergeFrom(
      static_cast<const IPlaceBombMsg &>(from));
}


void IPlaceBombMsg::MergeFrom(const IPlaceBombMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IPlaceBombMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IPlaceBombMsg::CopyFrom(const IPlaceBombMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IPlaceBombMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPlaceBombMsg::IsInitialized() const {
  return true;
}

void IPlaceBombMsg::InternalSwap(IPlaceBombMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPlaceBombMsg, y_)
      + sizeof(IPlaceBombMsg::y_)
      - PROTOBUF_FIELD_OFFSET(IPlaceBombMsg, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPlaceBombMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class IMoveMsg::_Internal {
 public:
};

IMoveMsg::IMoveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IMoveMsg)
}
IMoveMsg::IMoveMsg(const IMoveMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:IMoveMsg)
}

inline void IMoveMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

IMoveMsg::~IMoveMsg() {
  // @@protoc_insertion_point(destructor:IMoveMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMoveMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMoveMsg::ArenaDtor(void* object) {
  IMoveMsg* _this = reinterpret_cast< IMoveMsg* >(object);
  (void)_this;
}
void IMoveMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMoveMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMoveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:IMoveMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMoveMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMoveMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMoveMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IMoveMsg)
  return target;
}

size_t IMoveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IMoveMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMoveMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMoveMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMoveMsg::GetClassData() const { return &_class_data_; }

void IMoveMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMoveMsg *>(to)->MergeFrom(
      static_cast<const IMoveMsg &>(from));
}


void IMoveMsg::MergeFrom(const IMoveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IMoveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMoveMsg::CopyFrom(const IMoveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IMoveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMoveMsg::IsInitialized() const {
  return true;
}

void IMoveMsg::InternalSwap(IMoveMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMoveMsg, y_)
      + sizeof(IMoveMsg::y_)
      - PROTOBUF_FIELD_OFFSET(IMoveMsg, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMoveMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class ILeaveMsg::_Internal {
 public:
};

ILeaveMsg::ILeaveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ILeaveMsg)
}
ILeaveMsg::ILeaveMsg(const ILeaveMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ILeaveMsg)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ILeaveMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ILeaveMsg::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ILeaveMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class GameJoinMsg::_Internal {
 public:
};

GameJoinMsg::GameJoinMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GameJoinMsg)
}
GameJoinMsg::GameJoinMsg(const GameJoinMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&you_) -
    reinterpret_cast<char*>(&color_)) + sizeof(you_));
  // @@protoc_insertion_point(copy_constructor:GameJoinMsg)
}

inline void GameJoinMsg::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&you_) -
    reinterpret_cast<char*>(&color_)) + sizeof(you_));
}

GameJoinMsg::~GameJoinMsg() {
  // @@protoc_insertion_point(destructor:GameJoinMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameJoinMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameJoinMsg::ArenaDtor(void* object) {
  GameJoinMsg* _this = reinterpret_cast< GameJoinMsg* >(object);
  (void)_this;
}
void GameJoinMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameJoinMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameJoinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GameJoinMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&you_) -
      reinterpret_cast<char*>(&color_)) + sizeof(you_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameJoinMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameJoinMsg.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::Color>(val));
        } else
          goto handle_unusual;
        continue;
      // bool You = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          you_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameJoinMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameJoinMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameJoinMsg.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .Color color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  // bool You = 3;
  if (this->_internal_you() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_you(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameJoinMsg)
  return target;
}

size_t GameJoinMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameJoinMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Color color = 2;
  if (this->_internal_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_color());
  }

  // bool You = 3;
  if (this->_internal_you() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameJoinMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameJoinMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameJoinMsg::GetClassData() const { return &_class_data_; }

void GameJoinMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameJoinMsg *>(to)->MergeFrom(
      static_cast<const GameJoinMsg &>(from));
}


void GameJoinMsg::MergeFrom(const GameJoinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameJoinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from._internal_you() != 0) {
    _internal_set_you(from._internal_you());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameJoinMsg::CopyFrom(const GameJoinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameJoinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameJoinMsg::IsInitialized() const {
  return true;
}

void GameJoinMsg::InternalSwap(GameJoinMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameJoinMsg, you_)
      + sizeof(GameJoinMsg::you_)
      - PROTOBUF_FIELD_OFFSET(GameJoinMsg, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameJoinMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// ===================================================================

class GameWaitMsg::_Internal {
 public:
};

GameWaitMsg::GameWaitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GameWaitMsg)
}
GameWaitMsg::GameWaitMsg(const GameWaitMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  waitingfor_ = from.waitingfor_;
  // @@protoc_insertion_point(copy_constructor:GameWaitMsg)
}

inline void GameWaitMsg::SharedCtor() {
waitingfor_ = 0;
}

GameWaitMsg::~GameWaitMsg() {
  // @@protoc_insertion_point(destructor:GameWaitMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameWaitMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameWaitMsg::ArenaDtor(void* object) {
  GameWaitMsg* _this = reinterpret_cast< GameWaitMsg* >(object);
  (void)_this;
}
void GameWaitMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameWaitMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameWaitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GameWaitMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waitingfor_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameWaitMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 waitingFor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          waitingfor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameWaitMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameWaitMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 waitingFor = 1;
  if (this->_internal_waitingfor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_waitingfor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameWaitMsg)
  return target;
}

size_t GameWaitMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameWaitMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 waitingFor = 1;
  if (this->_internal_waitingfor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_waitingfor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameWaitMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameWaitMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameWaitMsg::GetClassData() const { return &_class_data_; }

void GameWaitMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameWaitMsg *>(to)->MergeFrom(
      static_cast<const GameWaitMsg &>(from));
}


void GameWaitMsg::MergeFrom(const GameWaitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameWaitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_waitingfor() != 0) {
    _internal_set_waitingfor(from._internal_waitingfor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameWaitMsg::CopyFrom(const GameWaitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameWaitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameWaitMsg::IsInitialized() const {
  return true;
}

void GameWaitMsg::InternalSwap(GameWaitMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(waitingfor_, other->waitingfor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameWaitMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[4]);
}

// ===================================================================

class OtherBombPlaceMsg::_Internal {
 public:
};

OtherBombPlaceMsg::OtherBombPlaceMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OtherBombPlaceMsg)
}
OtherBombPlaceMsg::OtherBombPlaceMsg(const OtherBombPlaceMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:OtherBombPlaceMsg)
}

inline void OtherBombPlaceMsg::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(y_));
}

OtherBombPlaceMsg::~OtherBombPlaceMsg() {
  // @@protoc_insertion_point(destructor:OtherBombPlaceMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OtherBombPlaceMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OtherBombPlaceMsg::ArenaDtor(void* object) {
  OtherBombPlaceMsg* _this = reinterpret_cast< OtherBombPlaceMsg* >(object);
  (void)_this;
}
void OtherBombPlaceMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OtherBombPlaceMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OtherBombPlaceMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:OtherBombPlaceMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherBombPlaceMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OtherBombPlaceMsg.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OtherBombPlaceMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OtherBombPlaceMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OtherBombPlaceMsg.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OtherBombPlaceMsg)
  return target;
}

size_t OtherBombPlaceMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OtherBombPlaceMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OtherBombPlaceMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OtherBombPlaceMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OtherBombPlaceMsg::GetClassData() const { return &_class_data_; }

void OtherBombPlaceMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OtherBombPlaceMsg *>(to)->MergeFrom(
      static_cast<const OtherBombPlaceMsg &>(from));
}


void OtherBombPlaceMsg::MergeFrom(const OtherBombPlaceMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OtherBombPlaceMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OtherBombPlaceMsg::CopyFrom(const OtherBombPlaceMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OtherBombPlaceMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherBombPlaceMsg::IsInitialized() const {
  return true;
}

void OtherBombPlaceMsg::InternalSwap(OtherBombPlaceMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OtherBombPlaceMsg, y_)
      + sizeof(OtherBombPlaceMsg::y_)
      - PROTOBUF_FIELD_OFFSET(OtherBombPlaceMsg, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherBombPlaceMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[5]);
}

// ===================================================================

class GotHitMsg::_Internal {
 public:
};

GotHitMsg::GotHitMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GotHitMsg)
}
GotHitMsg::GotHitMsg(const GotHitMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  livesremaining_ = from.livesremaining_;
  // @@protoc_insertion_point(copy_constructor:GotHitMsg)
}

inline void GotHitMsg::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
livesremaining_ = 0;
}

GotHitMsg::~GotHitMsg() {
  // @@protoc_insertion_point(destructor:GotHitMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GotHitMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GotHitMsg::ArenaDtor(void* object) {
  GotHitMsg* _this = reinterpret_cast< GotHitMsg* >(object);
  (void)_this;
}
void GotHitMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GotHitMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GotHitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GotHitMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  livesremaining_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GotHitMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GotHitMsg.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 livesRemaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          livesremaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GotHitMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GotHitMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GotHitMsg.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 livesRemaining = 2;
  if (this->_internal_livesremaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_livesremaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GotHitMsg)
  return target;
}

size_t GotHitMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GotHitMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 livesRemaining = 2;
  if (this->_internal_livesremaining() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_livesremaining());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GotHitMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GotHitMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GotHitMsg::GetClassData() const { return &_class_data_; }

void GotHitMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GotHitMsg *>(to)->MergeFrom(
      static_cast<const GotHitMsg &>(from));
}


void GotHitMsg::MergeFrom(const GotHitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GotHitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_livesremaining() != 0) {
    _internal_set_livesremaining(from._internal_livesremaining());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GotHitMsg::CopyFrom(const GotHitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GotHitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GotHitMsg::IsInitialized() const {
  return true;
}

void GotHitMsg::InternalSwap(GotHitMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(livesremaining_, other->livesremaining_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GotHitMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[6]);
}

// ===================================================================

class OtherMoveMsg::_Internal {
 public:
};

OtherMoveMsg::OtherMoveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OtherMoveMsg)
}
OtherMoveMsg::OtherMoveMsg(const OtherMoveMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:OtherMoveMsg)
}

inline void OtherMoveMsg::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

OtherMoveMsg::~OtherMoveMsg() {
  // @@protoc_insertion_point(destructor:OtherMoveMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OtherMoveMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OtherMoveMsg::ArenaDtor(void* object) {
  OtherMoveMsg* _this = reinterpret_cast< OtherMoveMsg* >(object);
  (void)_this;
}
void OtherMoveMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OtherMoveMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OtherMoveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:OtherMoveMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherMoveMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OtherMoveMsg.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OtherMoveMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OtherMoveMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OtherMoveMsg.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OtherMoveMsg)
  return target;
}

size_t OtherMoveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OtherMoveMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OtherMoveMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OtherMoveMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OtherMoveMsg::GetClassData() const { return &_class_data_; }

void OtherMoveMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OtherMoveMsg *>(to)->MergeFrom(
      static_cast<const OtherMoveMsg &>(from));
}


void OtherMoveMsg::MergeFrom(const OtherMoveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OtherMoveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OtherMoveMsg::CopyFrom(const OtherMoveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OtherMoveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherMoveMsg::IsInitialized() const {
  return true;
}

void OtherMoveMsg::InternalSwap(OtherMoveMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OtherMoveMsg, y_)
      + sizeof(OtherMoveMsg::y_)
      - PROTOBUF_FIELD_OFFSET(OtherMoveMsg, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherMoveMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[7]);
}

// ===================================================================

class OtherLeaveMsg::_Internal {
 public:
};

OtherLeaveMsg::OtherLeaveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:OtherLeaveMsg)
}
OtherLeaveMsg::OtherLeaveMsg(const OtherLeaveMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:OtherLeaveMsg)
}

inline void OtherLeaveMsg::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OtherLeaveMsg::~OtherLeaveMsg() {
  // @@protoc_insertion_point(destructor:OtherLeaveMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OtherLeaveMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OtherLeaveMsg::ArenaDtor(void* object) {
  OtherLeaveMsg* _this = reinterpret_cast< OtherLeaveMsg* >(object);
  (void)_this;
}
void OtherLeaveMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OtherLeaveMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OtherLeaveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:OtherLeaveMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherLeaveMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OtherLeaveMsg.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OtherLeaveMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OtherLeaveMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OtherLeaveMsg.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OtherLeaveMsg)
  return target;
}

size_t OtherLeaveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OtherLeaveMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OtherLeaveMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OtherLeaveMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OtherLeaveMsg::GetClassData() const { return &_class_data_; }

void OtherLeaveMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OtherLeaveMsg *>(to)->MergeFrom(
      static_cast<const OtherLeaveMsg &>(from));
}


void OtherLeaveMsg::MergeFrom(const OtherLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OtherLeaveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OtherLeaveMsg::CopyFrom(const OtherLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OtherLeaveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherLeaveMsg::IsInitialized() const {
  return true;
}

void OtherLeaveMsg::InternalSwap(OtherLeaveMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherLeaveMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[8]);
}

// ===================================================================

class GameWonMsg::_Internal {
 public:
};

GameWonMsg::GameWonMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GameWonMsg)
}
GameWonMsg::GameWonMsg(const GameWonMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  winner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    winner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_winner().empty()) {
    winner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_winner(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GameWonMsg)
}

inline void GameWonMsg::SharedCtor() {
winner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  winner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameWonMsg::~GameWonMsg() {
  // @@protoc_insertion_point(destructor:GameWonMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameWonMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  winner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameWonMsg::ArenaDtor(void* object) {
  GameWonMsg* _this = reinterpret_cast< GameWonMsg* >(object);
  (void)_this;
}
void GameWonMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameWonMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameWonMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:GameWonMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameWonMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string winner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_winner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GameWonMsg.winner"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameWonMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameWonMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string winner = 1;
  if (!this->_internal_winner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_winner().data(), static_cast<int>(this->_internal_winner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GameWonMsg.winner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameWonMsg)
  return target;
}

size_t GameWonMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameWonMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string winner = 1;
  if (!this->_internal_winner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_winner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameWonMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameWonMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameWonMsg::GetClassData() const { return &_class_data_; }

void GameWonMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameWonMsg *>(to)->MergeFrom(
      static_cast<const GameWonMsg &>(from));
}


void GameWonMsg::MergeFrom(const GameWonMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameWonMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_winner().empty()) {
    _internal_set_winner(from._internal_winner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameWonMsg::CopyFrom(const GameWonMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameWonMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameWonMsg::IsInitialized() const {
  return true;
}

void GameWonMsg::InternalSwap(GameWonMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &winner_, lhs_arena,
      &other->winner_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameWonMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[9]);
}

// ===================================================================

class GameMessage::_Internal {
 public:
  static const ::IPlaceBombMsg& i_place_bomb(const GameMessage* msg);
  static const ::IMoveMsg& i_move(const GameMessage* msg);
  static const ::ILeaveMsg& i_leave(const GameMessage* msg);
  static const ::GameJoinMsg& game_join(const GameMessage* msg);
  static const ::GameWaitMsg& game_wait(const GameMessage* msg);
  static const ::OtherBombPlaceMsg& other_bomb_place(const GameMessage* msg);
  static const ::GotHitMsg& got_hit_message(const GameMessage* msg);
  static const ::OtherMoveMsg& other_move(const GameMessage* msg);
  static const ::OtherLeaveMsg& other_leave(const GameMessage* msg);
  static const ::GameWonMsg& game_won(const GameMessage* msg);
};

const ::IPlaceBombMsg&
GameMessage::_Internal::i_place_bomb(const GameMessage* msg) {
  return *msg->message_.i_place_bomb_;
}
const ::IMoveMsg&
GameMessage::_Internal::i_move(const GameMessage* msg) {
  return *msg->message_.i_move_;
}
const ::ILeaveMsg&
GameMessage::_Internal::i_leave(const GameMessage* msg) {
  return *msg->message_.i_leave_;
}
const ::GameJoinMsg&
GameMessage::_Internal::game_join(const GameMessage* msg) {
  return *msg->message_.game_join_;
}
const ::GameWaitMsg&
GameMessage::_Internal::game_wait(const GameMessage* msg) {
  return *msg->message_.game_wait_;
}
const ::OtherBombPlaceMsg&
GameMessage::_Internal::other_bomb_place(const GameMessage* msg) {
  return *msg->message_.other_bomb_place_;
}
const ::GotHitMsg&
GameMessage::_Internal::got_hit_message(const GameMessage* msg) {
  return *msg->message_.got_hit_message_;
}
const ::OtherMoveMsg&
GameMessage::_Internal::other_move(const GameMessage* msg) {
  return *msg->message_.other_move_;
}
const ::OtherLeaveMsg&
GameMessage::_Internal::other_leave(const GameMessage* msg) {
  return *msg->message_.other_leave_;
}
const ::GameWonMsg&
GameMessage::_Internal::game_won(const GameMessage* msg) {
  return *msg->message_.game_won_;
}
void GameMessage::set_allocated_i_place_bomb(::IPlaceBombMsg* i_place_bomb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (i_place_bomb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IPlaceBombMsg>::GetOwningArena(i_place_bomb);
    if (message_arena != submessage_arena) {
      i_place_bomb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i_place_bomb, submessage_arena);
    }
    set_has_i_place_bomb();
    message_.i_place_bomb_ = i_place_bomb;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.i_place_bomb)
}
void GameMessage::set_allocated_i_move(::IMoveMsg* i_move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (i_move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IMoveMsg>::GetOwningArena(i_move);
    if (message_arena != submessage_arena) {
      i_move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i_move, submessage_arena);
    }
    set_has_i_move();
    message_.i_move_ = i_move;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.i_move)
}
void GameMessage::set_allocated_i_leave(::ILeaveMsg* i_leave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (i_leave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ILeaveMsg>::GetOwningArena(i_leave);
    if (message_arena != submessage_arena) {
      i_leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i_leave, submessage_arena);
    }
    set_has_i_leave();
    message_.i_leave_ = i_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.i_leave)
}
void GameMessage::set_allocated_game_join(::GameJoinMsg* game_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (game_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GameJoinMsg>::GetOwningArena(game_join);
    if (message_arena != submessage_arena) {
      game_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_join, submessage_arena);
    }
    set_has_game_join();
    message_.game_join_ = game_join;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.game_join)
}
void GameMessage::set_allocated_game_wait(::GameWaitMsg* game_wait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (game_wait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GameWaitMsg>::GetOwningArena(game_wait);
    if (message_arena != submessage_arena) {
      game_wait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_wait, submessage_arena);
    }
    set_has_game_wait();
    message_.game_wait_ = game_wait;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.game_wait)
}
void GameMessage::set_allocated_other_bomb_place(::OtherBombPlaceMsg* other_bomb_place) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (other_bomb_place) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::OtherBombPlaceMsg>::GetOwningArena(other_bomb_place);
    if (message_arena != submessage_arena) {
      other_bomb_place = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_bomb_place, submessage_arena);
    }
    set_has_other_bomb_place();
    message_.other_bomb_place_ = other_bomb_place;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.other_bomb_place)
}
void GameMessage::set_allocated_got_hit_message(::GotHitMsg* got_hit_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (got_hit_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GotHitMsg>::GetOwningArena(got_hit_message);
    if (message_arena != submessage_arena) {
      got_hit_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, got_hit_message, submessage_arena);
    }
    set_has_got_hit_message();
    message_.got_hit_message_ = got_hit_message;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.got_hit_message)
}
void GameMessage::set_allocated_other_move(::OtherMoveMsg* other_move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (other_move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::OtherMoveMsg>::GetOwningArena(other_move);
    if (message_arena != submessage_arena) {
      other_move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_move, submessage_arena);
    }
    set_has_other_move();
    message_.other_move_ = other_move;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.other_move)
}
void GameMessage::set_allocated_other_leave(::OtherLeaveMsg* other_leave) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (other_leave) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::OtherLeaveMsg>::GetOwningArena(other_leave);
    if (message_arena != submessage_arena) {
      other_leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_leave, submessage_arena);
    }
    set_has_other_leave();
    message_.other_leave_ = other_leave;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.other_leave)
}
void GameMessage::set_allocated_game_won(::GameWonMsg* game_won) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (game_won) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GameWonMsg>::GetOwningArena(game_won);
    if (message_arena != submessage_arena) {
      game_won = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_won, submessage_arena);
    }
    set_has_game_won();
    message_.game_won_ = game_won;
  }
  // @@protoc_insertion_point(field_set_allocated:GameMessage.game_won)
}
GameMessage::GameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:GameMessage)
}
GameMessage::GameMessage(const GameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_type_ = from.message_type_;
  clear_has_message();
  switch (from.message_case()) {
    case kIPlaceBomb: {
      _internal_mutable_i_place_bomb()->::IPlaceBombMsg::MergeFrom(from._internal_i_place_bomb());
      break;
    }
    case kIMove: {
      _internal_mutable_i_move()->::IMoveMsg::MergeFrom(from._internal_i_move());
      break;
    }
    case kILeave: {
      _internal_mutable_i_leave()->::ILeaveMsg::MergeFrom(from._internal_i_leave());
      break;
    }
    case kGameJoin: {
      _internal_mutable_game_join()->::GameJoinMsg::MergeFrom(from._internal_game_join());
      break;
    }
    case kGameWait: {
      _internal_mutable_game_wait()->::GameWaitMsg::MergeFrom(from._internal_game_wait());
      break;
    }
    case kOtherBombPlace: {
      _internal_mutable_other_bomb_place()->::OtherBombPlaceMsg::MergeFrom(from._internal_other_bomb_place());
      break;
    }
    case kGotHitMessage: {
      _internal_mutable_got_hit_message()->::GotHitMsg::MergeFrom(from._internal_got_hit_message());
      break;
    }
    case kOtherMove: {
      _internal_mutable_other_move()->::OtherMoveMsg::MergeFrom(from._internal_other_move());
      break;
    }
    case kOtherLeave: {
      _internal_mutable_other_leave()->::OtherLeaveMsg::MergeFrom(from._internal_other_leave());
      break;
    }
    case kGameWon: {
      _internal_mutable_game_won()->::GameWonMsg::MergeFrom(from._internal_game_won());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameMessage)
}

inline void GameMessage::SharedCtor() {
message_type_ = 0;
clear_has_message();
}

GameMessage::~GameMessage() {
  // @@protoc_insertion_point(destructor:GameMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void GameMessage::ArenaDtor(void* object) {
  GameMessage* _this = reinterpret_cast< GameMessage* >(object);
  (void)_this;
}
void GameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:GameMessage)
  switch (message_case()) {
    case kIPlaceBomb: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.i_place_bomb_;
      }
      break;
    }
    case kIMove: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.i_move_;
      }
      break;
    }
    case kILeave: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.i_leave_;
      }
      break;
    }
    case kGameJoin: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.game_join_;
      }
      break;
    }
    case kGameWait: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.game_wait_;
      }
      break;
    }
    case kOtherBombPlace: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.other_bomb_place_;
      }
      break;
    }
    case kGotHitMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.got_hit_message_;
      }
      break;
    }
    case kOtherMove: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.other_move_;
      }
      break;
    }
    case kOtherLeave: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.other_leave_;
      }
      break;
    }
    case kGameWon: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.game_won_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void GameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_type_ = 0;
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MessageType message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .IPlaceBombMsg i_place_bomb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_i_place_bomb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IMoveMsg i_move = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_i_move(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ILeaveMsg i_leave = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_i_leave(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameJoinMsg game_join = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_join(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameWaitMsg game_wait = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_wait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OtherBombPlaceMsg other_bomb_place = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_bomb_place(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GotHitMsg got_hit_message = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_got_hit_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OtherMoveMsg other_move = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_move(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OtherLeaveMsg other_leave = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_leave(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameWonMsg game_won = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_won(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageType message_type = 1;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_message_type(), target);
  }

  // .IPlaceBombMsg i_place_bomb = 2;
  if (_internal_has_i_place_bomb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::i_place_bomb(this), target, stream);
  }

  // .IMoveMsg i_move = 3;
  if (_internal_has_i_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::i_move(this), target, stream);
  }

  // .ILeaveMsg i_leave = 4;
  if (_internal_has_i_leave()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::i_leave(this), target, stream);
  }

  // .GameJoinMsg game_join = 5;
  if (_internal_has_game_join()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::game_join(this), target, stream);
  }

  // .GameWaitMsg game_wait = 6;
  if (_internal_has_game_wait()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::game_wait(this), target, stream);
  }

  // .OtherBombPlaceMsg other_bomb_place = 7;
  if (_internal_has_other_bomb_place()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::other_bomb_place(this), target, stream);
  }

  // .GotHitMsg got_hit_message = 8;
  if (_internal_has_got_hit_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::got_hit_message(this), target, stream);
  }

  // .OtherMoveMsg other_move = 9;
  if (_internal_has_other_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::other_move(this), target, stream);
  }

  // .OtherLeaveMsg other_leave = 10;
  if (_internal_has_other_leave()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::other_leave(this), target, stream);
  }

  // .GameWonMsg game_won = 11;
  if (_internal_has_game_won()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::game_won(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage)
  return target;
}

size_t GameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MessageType message_type = 1;
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  switch (message_case()) {
    // .IPlaceBombMsg i_place_bomb = 2;
    case kIPlaceBomb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.i_place_bomb_);
      break;
    }
    // .IMoveMsg i_move = 3;
    case kIMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.i_move_);
      break;
    }
    // .ILeaveMsg i_leave = 4;
    case kILeave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.i_leave_);
      break;
    }
    // .GameJoinMsg game_join = 5;
    case kGameJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.game_join_);
      break;
    }
    // .GameWaitMsg game_wait = 6;
    case kGameWait: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.game_wait_);
      break;
    }
    // .OtherBombPlaceMsg other_bomb_place = 7;
    case kOtherBombPlace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.other_bomb_place_);
      break;
    }
    // .GotHitMsg got_hit_message = 8;
    case kGotHitMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.got_hit_message_);
      break;
    }
    // .OtherMoveMsg other_move = 9;
    case kOtherMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.other_move_);
      break;
    }
    // .OtherLeaveMsg other_leave = 10;
    case kOtherLeave: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.other_leave_);
      break;
    }
    // .GameWonMsg game_won = 11;
    case kGameWon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.game_won_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameMessage::GetClassData() const { return &_class_data_; }

void GameMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameMessage *>(to)->MergeFrom(
      static_cast<const GameMessage &>(from));
}


void GameMessage::MergeFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  switch (from.message_case()) {
    case kIPlaceBomb: {
      _internal_mutable_i_place_bomb()->::IPlaceBombMsg::MergeFrom(from._internal_i_place_bomb());
      break;
    }
    case kIMove: {
      _internal_mutable_i_move()->::IMoveMsg::MergeFrom(from._internal_i_move());
      break;
    }
    case kILeave: {
      _internal_mutable_i_leave()->::ILeaveMsg::MergeFrom(from._internal_i_leave());
      break;
    }
    case kGameJoin: {
      _internal_mutable_game_join()->::GameJoinMsg::MergeFrom(from._internal_game_join());
      break;
    }
    case kGameWait: {
      _internal_mutable_game_wait()->::GameWaitMsg::MergeFrom(from._internal_game_wait());
      break;
    }
    case kOtherBombPlace: {
      _internal_mutable_other_bomb_place()->::OtherBombPlaceMsg::MergeFrom(from._internal_other_bomb_place());
      break;
    }
    case kGotHitMessage: {
      _internal_mutable_got_hit_message()->::GotHitMsg::MergeFrom(from._internal_got_hit_message());
      break;
    }
    case kOtherMove: {
      _internal_mutable_other_move()->::OtherMoveMsg::MergeFrom(from._internal_other_move());
      break;
    }
    case kOtherLeave: {
      _internal_mutable_other_leave()->::OtherLeaveMsg::MergeFrom(from._internal_other_leave());
      break;
    }
    case kGameWon: {
      _internal_mutable_game_won()->::GameWonMsg::MergeFrom(from._internal_game_won());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameMessage::CopyFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {
  return true;
}

void GameMessage::InternalSwap(GameMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_type_, other->message_type_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IPlaceBombMsg* Arena::CreateMaybeMessage< ::IPlaceBombMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IPlaceBombMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::IMoveMsg* Arena::CreateMaybeMessage< ::IMoveMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IMoveMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ILeaveMsg* Arena::CreateMaybeMessage< ::ILeaveMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ILeaveMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::GameJoinMsg* Arena::CreateMaybeMessage< ::GameJoinMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameJoinMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::GameWaitMsg* Arena::CreateMaybeMessage< ::GameWaitMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameWaitMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::OtherBombPlaceMsg* Arena::CreateMaybeMessage< ::OtherBombPlaceMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OtherBombPlaceMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::GotHitMsg* Arena::CreateMaybeMessage< ::GotHitMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GotHitMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::OtherMoveMsg* Arena::CreateMaybeMessage< ::OtherMoveMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OtherMoveMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::OtherLeaveMsg* Arena::CreateMaybeMessage< ::OtherLeaveMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OtherLeaveMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::GameWonMsg* Arena::CreateMaybeMessage< ::GameWonMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameWonMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMessage* Arena::CreateMaybeMessage< ::GameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
